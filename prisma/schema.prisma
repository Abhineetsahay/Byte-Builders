// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String         @id @default(uuid())
  email                 String
  name                  String
  description           String
  city                  String
  state                 String
  foodDonationsAccepted FoodDonation[]
  issuesAccepted        Issue[]

  @@map("organizations")
}

model User {
  id                String         @id @default(uuid())
  email             String
  name              String
  city              String
  state             String
  foodDonationsMade FoodDonation[]
  issues            Issue[]
  issueLikes        IssueLike[]

  @@map("users")
}

enum FoodDonationStatus {
  PENDING
  ACCEPTED

  @@map("food_donation_status")
}

model FoodDonation {
  donationId    Int      @id @default(autoincrement())
  foodType      String
  quantity      String
  pickupAddress String
  photoURL      String
  description   String
  expiryDate    DateTime
  createdAt     DateTime @default(now())

  donor         User               @relation(fields: [donorUserId], references: [id])
  donorUserId   String
  status        FoodDonationStatus
  acceptedByOrg Organization?      @relation(fields: [acceptorOrgId], references: [id])
  acceptorOrgId String?

  @@map("food_dontaions")
}

enum IssueStatus {
  PENDING
  ACCEPTED
  RESOLVED

  @@map("issue_status")
}

enum IssueCategory {
  waste
  water
  health
  roads
  electicity
  environment
  safety

  @@map("issue_category")
}

enum IssueUrgencyLevel {
  HIGH
  MEDIUM
  LOW

  @@map("issue_urgency_level")
}

model Issue {
  id           String            @id @default(uuid())
  title        String
  description  String
  photoURL     String
  location     String
  createdAt    DateTime          @default(now())
  status       IssueStatus
  category     IssueCategory
  urgencyLevel IssueUrgencyLevel
  likes IssueLike[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  acceptedBy    Organization? @relation(fields: [acceptorOrgId], references: [id])
  acceptorOrgId String?

  @@map("issues")
}

model IssueLike {
  user    User   @relation(fields: [usedId], references: [id])
  usedId  String
  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId String

  @@id([usedId, issueId])
  @@map("issue_likes")
}
